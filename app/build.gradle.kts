/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/9.0.0/userguide/building_java_projects.html in the Gradle documentation.
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    java
    application
    eclipse
}

group = "com.teic"
version = "0.0.3"

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // This dependency is used by the application.
    implementation(libs.guava)
    implementation("com.googlecode.lanterna:lanterna:3.1.3")
    implementation("com.fasterxml.jackson.core:jackson-core:2.19.2")
    implementation("com.fasterxml.jackson.core:jackson-databind:2.19.2")
}

testing {
    suites {
        // Configure the built-in test suite
        val test by getting(JvmTestSuite::class) {
            // Use JUnit Jupiter test framework
            useJUnitJupiter("5.12.1")
        }
    }
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = "com.teic.trueris.App"
}

tasks.withType<Test> {
    isEnabled = false
}

tasks.withType<JavaCompile>().matching {
    it.name.contains("Test")
}.configureEach {
    enabled = false
}

tasks.register<Jar>("fatJar") {
    group = "build"
    description = "Assembles a fat JAR including all dependencies"

    archiveClassifier.set("all") // The JAR will be named like <name>-<version>-all.jar

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    // Include compiled classes
    from(sourceSets.main.get().output)

    // Include runtime dependencies
    dependsOn(configurations.runtimeClasspath)
    from({
        configurations.runtimeClasspath.get().map { if (it.isDirectory) it else zipTree(it) }
    })

    // Ensure main class is set in the manifest
    manifest {
        attributes["Main-Class"] = application.mainClass
    }
}
